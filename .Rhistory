# Plot points for each data point and color by species
geom_point(size = 2) +
# Show a simple linear model fit created separately for each species:
geom_smooth(method = lm, se = FALSE, alpha = 0.5) +
scale_color_brewer(palette = "Paired") +
labs(x = "Temperature (C)", y = "Chirp Rate (per minute)")
library(rsample)
library(dplyr)
library(tidyr)
library(purrr)
library(ggplot2)
data(crickets, package = "modeldata")
# Plot the temperature on the x-axis, the chirp rate on the y-axis. The plot
# elements will be colored differently for each species:
ggplot(crickets,
aes(x = temp, y = rate, color = species, pch = species, lty = species)) +
# Plot points for each data point and color by species
geom_point(size = 2) +
# Show a simple linear model fit created separately for each species:
geom_smooth(method = lm, se = FALSE, alpha = 0.5) +
scale_color_brewer(palette = "Paired") +
labs(x = "Temperature (C)", y = "Chirp Rate (per minute)")
library(rsample)
library(dplyr)
library(tidyr)
library(purrr)
library(ggplot2)
library(modeldata) # For using crickes data
data(crickets, package = "modeldata")
# Plot the temperature on the x-axis, the chirp rate on the y-axis. The plot
# elements will be colored differently for each species:
ggplot(crickets,
aes(x = temp, y = rate, color = species, pch = species, lty = species)) +
# Plot points for each data point and color by species
geom_point(size = 2) +
# Show a simple linear model fit created separately for each species:
geom_smooth(method = lm, se = FALSE, alpha = 0.5) +
scale_color_brewer(palette = "Paired") +
labs(x = "Temperature (C)", y = "Chirp Rate (per minute)")
library(rsample)
library(dplyr)
library(tidyr)
library(purrr)
library(ggplot2)
library(modeldata) # For using crickes data
install.packages("modeldata")
library(rsample)
library(dplyr)
library(tidyr)
library(purrr)
library(ggplot2)
library(modeldata) # For using crickes data
data(crickets, package = "modeldata")
# Plot the temperature on the x-axis, the chirp rate on the y-axis. The plot
# elements will be colored differently for each species:
ggplot(crickets,
aes(x = temp, y = rate, color = species, pch = species, lty = species)) +
# Plot points for each data point and color by species
geom_point(size = 2) +
# Show a simple linear model fit created separately for each species:
geom_smooth(method = lm, se = FALSE, alpha = 0.5) +
scale_color_brewer(palette = "Paired") +
labs(x = "Temperature (C)", y = "Chirp Rate (per minute)")
interaction_fit <-  lm(rate ~ (temp + species)^2, data = crickets)
# To print a short summary of the model:
interaction_fit
# Then we compare the two:
anova(main_effect_fit, interaction_fit)
interaction_fit <-  lm(rate ~ (temp + species)^2, data = crickets)
# To print a short summary of the model:
interaction_fit
# We see the combined variable has low impact, so lets see what the p-value is with ANOVA.
# First we create a fit without the combined variable:
main_effect_fit <-  lm(rate ~ temp + species, data = crickets)
# Then we compare the two:
anova(main_effect_fit, interaction_fit)
split_by_species
split_by_species <-
crickets %>%
group_nest(species)
split_by_species
model_by_species <-
split_by_species %>%
mutate(model = map(data, ~ lm(rate ~ temp, data = .x)))
model_by_species
model_by_species %>%
mutate(coef = map(model, tidy())) %>%
select(species, coef) %>%
unnest(cols = c(coef))
model_by_species %>%
mutate(coef = map(model, tidy) %>%
select(species, coef) %>%
unnest(cols = c(coef))
model_by_species %>%
mutate(coef = map(model, tidy)) %>%
select(species, coef) %>%
unnest(cols = c(coef))
model_by_species %>%
mutate(coef = map(model, tidy())) %>%
select(species, coef) %>%
unnest(cols = c(coef))
model_by_species <-
split_by_species %>%
mutate(model = map(data, ~ lm(rate ~ temp, data = .x)))
model_by_species
model_by_species %>%
mutate(coef = map(model, tidy())) %>%
select(species, coef) %>%
unnest(cols = c(coef))
model
model_by_species %>%
mutate(coef = map(model, tidy)) %>%
select(species, coef) %>%
unnest(cols = c(coef))
model_by_species
model_by_species %>% select(model)
model_by_species %>%
mutate(coef = map(model, tidy)) %>%
select(species, coef) %>%
unnest(cols = c(coef))
broom::tidy.lm
model_by_species %>%
mutate(coef = map(model, broom::tidy)) %>%
select(species, coef) %>%
unnest(cols = c(coef))
?tidy
tibble::tribble(~sample, ~gene1, ~gene2, ~gene3, ~gene4, ~gene5,
"x1", 79, 31, 18, 49, 29,
"x2", 12, 56, 72, 15, 52,
"x3", 8, 11, 9, 35, 18)
tibble::tibble(sample = c("x1", "x2", "x3"))
counts <- tibble::tribble(~sample, ~gene1, ~gene2, ~gene3, ~gene4, ~gene5,
"x1", 79, 31, 18, 49, 29,
"x2", 12, 56, 72, 15, 52,
"x3", 8, 11, 9, 35, 18)
install.packages("compositions")
counts %>%
compositions::clo
library(magrittr)
counts %>%
compositions::clo
counts %>%
compositions::clo()
counts
counts %>%
compositions::clo(parts = -sample)
counts %>%
compositions::clo(parts = c(gene1, gene2, gene3, gene4, gene5))
?compositions::clo
counts %>%
compositions::clo()
counts %>%
compositions::clo(parts == c(gene1, gene2, gene3, gene4, gene5))
counts %>%
compositions::clo(parts = c(gene1, gene2, gene3, gene4, gene5))
counts %>%
compositions::clo(parts = c("gene1", gene2, gene3, gene4, gene5))
counts %>%
compositions::clo(parts = c("gene1", "gene2", "gene3", "gene4", "gene5"))
counts %>%
group_by(sample) %>%
mean()
library(dplyr)
counts %>%
group_by(sample) %>%
mean()
library(tidyverse)
counts %>%
group_by(sample) %>%
summarise(mean = mean())
counts %>%
group_by(sample) %>%
summarise(mean())
counts %>%
group_by(sample)
counts %>%
group_by(sample) %>%
summarise(mean())
counts %>%
group_by(sample) %>%
select(-sample) %>%
summarise(mean())
counts %>%
group_by(sample) %>%
select(-sample) %>%
counts %>%
group_by(sample) %>%
select(-sample)
counts %>%
group_by(sample) %>%
select(-sample) %>%
summarise(n())
counts %>%
summarise(n())
counts %>%
summarise(mean())
counts
counts %>%
pivot_longer(cols = -sample,
names_to = gene,
values_to = count)
counts %>%
pivot_longer(cols = -sample,
names_to = "gene",
values_to = "count")
counts %>%
pivot_longer(cols = -sample,
names_to = "gene",
values_to = "count") %>%
group_by(sample) %>%
mean()
counts %>%
pivot_longer(cols = -sample,
names_to = "gene",
values_to = "count") %>%
group_by(sample) %>%
summarise()
counts %>%
pivot_longer(cols = -sample,
names_to = "gene",
values_to = "count") %>%
group_by(sample) %>%
summarise(mean())
counts %>%
pivot_longer(cols = -sample,
names_to = "gene",
values_to = "count") %>%
summarise(.groups = sample)
counts %>%
pivot_longer(cols = -sample,
names_to = "gene",
values_to = "count")
counts %>%
select(-sample) %>%
rowwise() %>%
mean()
counts %>%
select(-sample) %>%
rowwise()
counts %>%
select(-sample) %>%
rowwise() %>%
summarise()
counts %>%
select(-sample) %>%
rowwise() %>%
summarise(mean())
counts %>%
select(-sample) %>%
rowwise() %>%
summarise(mean = mean(everything()))
counts %>%
select(-sample) %>%
rowwise() %>%
summarise(mean = mean(c(everything())))
counts %>%
select(-sample) %>%
rowwise() %>%
summarise(mean = mean(c("gene1", "gene2", "gene3", "gene4", "gene5")))
counts %>%
select(-sample) %>%
rowwise() %>%
summarise(mean(c("gene1", "gene2", "gene3", "gene4", "gene5")))
counts %>%
select(-sample) %>%
rowwise() %>%
summarise(mean = mean(c(gene1, gene2, gene3, gene4, gene5)))
means <- counts %>%
select(-sample) %>%
rowwise() %>%
summarise(mean = mean(c(gene1, gene2, gene3, gene4, gene5)))
counts %>%
bind_rows(means)
counts %>%
bind_cols()
counts %>%
bind_cols(means)
counts %>%
summary(gene1 - mean)
counts %>%
mutate(gene1 = gene1 - mean)
counts
counts %<>%
bind_cols(means)
counts
counts %>%
mutate(gene1 = gene1 - mean)
counts %>%
mutate(gene1 = gene1 - mean,
gene2 = gene2 - mean,
gene3 = gene3 - mean,
gene4 = gene4 - mean,
gene5 = gene5 - mean)
counts %>%
select(-sample) %>%
rowSums()
sum <- counts %>%
select(-sample) %>%
#rowSums()
rowwise() %>%
summarise(mean = sum(c(gene1, gene2, gene3, gene4, gene5)))
sum
counts
counts %>%
mutate(sum = rowSum())
counts %>%
mutate(sum = rowSums())
counts %>%
mutate(sum = rowSums(c(gene1, gene2, gene3, gene4, gene5)))
counts %>%
mutate(sum = rowSums(.))
mutate(sum = rowSums(.))
counts %>%
select(-sample) %>%
mutate(sum = rowSums(.))
counts <- tibble::tribble(~sample, ~gene1, ~gene2, ~gene3, ~gene4, ~gene5,
"x1", 79, 31, 18, 49, 29,
"x2", 12, 56, 72, 15, 52,
"x3", 8, 11, 9, 35, 18)
counts %>%
select(-sample) %>%
mutate(sum = rowSums(.))
counts %>%
select(-sample) %>%
mutate(sum = rowSums(is.numeric()))
counts %>%
select(-sample) %>%
mutate(sum = rowSums(is.numeric(.)))
counts %>%
select(-sample) %>%
mutate(sum = rowSums())
counts %>%
select(-sample) %>%
mutate(sum = rowSums(.))
counts
counts %<>%
select(-sample) %>%
mutate(sum = rowSums(.))
counts
counts %>%
mutate(gene1 = (100 / sum) * gene1,
gene2 = (100 / sum) * gene2,
gene3 = (100 / sum) * gene3,
gene4 = (100 / sum) * gene4,
gene5 = (100 / sum) * gene5)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
View(counts)
View(manual_calc)
View(clo_function)
source("~/.active-rstudio-document", echo=TRUE)
counts
clo_function
manual_calc
clr_function <- counts %>%
compositions::clr()
clr_function
?compositions::clr
compositions::clr
?log
clr_function <- counts %>%
select(-sample) %>%
compositions::clr()
clr_function
# Functions
geometric.mean <- function(x,
na.rm=TRUE) {
exp(mean(log(x)
na.rm=na.rm))
}
geometric.mean <- function(x,
na.rm=TRUE) {
exp(mean(log(x)
na.rm=na.rm))
}
# Functions
geometric.mean <- function(x,
na.rm=TRUE) {
exp(mean(log(x),
na.rm=na.rm))
}
counts %>%
select(-sample) %>%
geometric.mean()
counts %>%
select(-sample)
counts %>%
select(-sample)
counts %>%
select(-sample) %>%
mutate(sum = rowSums(.))
counts %>%
select(-sample) %>%
mutate(sum = rowSums(log(.)))
log(79)+log(31)+log(18)+log(49)+log(29)
nrow(counts)
counts %>%
select(-sample) %>%
mutate(sum = rowSums(log(.)) / nrow(.))
counts %>%
select(-sample) %>%
mutate(gm = rowSums(log(.)) / nrow(.))
exp(5.98)
counts %>%
select(-sample) %>%
mutate(gm = exp(rowSums(log(.)) / nrow(.)))
counts %>%
select(-sample) %>%
mutate(gm = exp(rowSums(ln(.)) / nrow(.)))
?log
exp(1)
?LOG
gene5 = log(gene5/gm)
counts %>%
select(-sample) %>%
mutate(gm = exp(rowSums(log(.)) / nrow(.))) %>%
mutate(gene1 = log(gene1/gm),
gene2 = log(gene2/gm),
gene3 = log(gene3/gm),
gene4 = log(gene4/gm),
gene5 = log(gene5/gm))
clr_manual <- counts %>%
select(-sample) %>%
mutate(gm = exp(rowSums(log(.)) / nrow(.))) %>%
mutate(gene1 = log(gene1/gm),
gene2 = log(gene2/gm),
gene3 = log(gene3/gm),
gene4 = log(gene4/gm),
gene5 = log(gene5/gm))
clr_function
clr_manual
source("C:/Users/Willi/OneDrive - Danmarks Tekniske Universitet/Applied Methods in Metagenomics/L06 - Abundance measures and compositional data analysis/exercise.R", echo=TRUE)
clr_function
clr_manual
counts %>%
select(-sample) %>%
mutate(gm = exp(rowSums(log(.)) / nrow(.))) %>%
mutate(gene1 = log((gene1/gm)),
gene2 = log(gene2/gm),
gene3 = log(gene3/gm),
gene4 = log(gene4/gm),
gene5 = log(gene5/gm))
counts %>%
select(-sample) %>%
mutate(gm = exp(rowSums(log(.)) / nrow(.)))
79/397
log(0.1989924)
source("C:/Users/Willi/OneDrive - Danmarks Tekniske Universitet/Applied Methods in Metagenomics/L06 - Abundance measures and compositional data analysis/exercise.R", echo=TRUE)
clo_function
clo_manual
clr_function
clr_manual
counts
log(79)+log(31)+log(18)+log(49)+log(29)
17.95292/5
clr_manual <- counts %>%
select(-sample) %>%
mutate(gm = exp(rowSums(log(.)) / ncol(.))) %>%
mutate(gene1 = log(gene1/gm),
gene2 = log(gene2/gm),
gene3 = log(gene3/gm),
gene4 = log(gene4/gm),
gene5 = log(gene5/gm))
clr_manual
clr_function
install.packages("zCompositions")
library(zCompositions)
?zCompositions::cmultRepl()
load("~/Repo/BioStatistics/data/beeAbunds.rda")
load("~/Repo/BioStatistics/data/beeObs.rda")
load("~/Repo/BioStatistics/data/effort_rare.rda")
load("~/Repo/BioStatistics/data/err_plot_data.rda")
load("~/Repo/BioStatistics/data/errs.rda")
load("~/Repo/BioStatistics/data/mean_ests.rda")
View(beeAbunds)
View(beeObs)
View(effort_rare)
View(err_plot_data)
View(errs)
View(mean_ests)
read.csv("data/microbiome_MHC_AA_data_nostops.csv") %>%
View()
library("magrittr")
read.csv("data/microbiome_MHC_AA_data_nostops.csv") %>%
View()
read.csv("data/Wildstickle_metadata.txt", sep = "\t") %>%
View()
load("~/Repo/BioStatistics/data/beeObs.rda")
View(beeAbunds)
View(beeObs)
read.csv("data/Wildstickle_richness.txt", sep = "\t") %>%
View()
read.csv("data/Wildstickleotus.txt", sep = "\t") %>%
View()
read.csv("data/OTU_Table_102_samples_nosingleton_86770.biom") %>%
View()
read.csv("data/OTU_Table_102_samples_nosingleton_86770.biom")
install.packages("rbiom")
library("rbiom")
read.biom("data/OTU_Table_102_samples_nosingleton_86770.biom")
read.biom("data/OTU_Table_102_samples_nosingleton_86770.biom") %>%
View()
biom <- read.biom("data/OTU_Table_102_samples_nosingleton_86770.biom")
biom <- read.biom("data/OTU_Table_102_samples_nosingleton_86770.biom")
counts(biom) %>% View()
info(biom) %>% View()
phylogeny(biom) %>% View()
taxa.ranks(biom) %>% View()
beeObs %>% dplyr::distinct(sr)
read.csv("data/Wildstickle_metadata.txt", sep = "\t") %>%
View()
