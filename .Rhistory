lg_model <- logistic_reg()
# Show available packages for the model
show_engines("logistic_reg")
lg_model <- lg_model %>%
set_engine("glm")
#| label: tbl-all-predictors
lg_fit <- lg_model %>%
fit(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width,
data = iris_train)
lg_fit %>% tidy()
iris_test %>%
select(Species) %>%
bind_cols(predict(lg_fit,
new_data = iris_test))
dimension <- list(
remove_one = Species ~ Sepal.Width + Petal.Length + Petal.Width,
remove_two = Species ~ Petal.Length + Petal.Width,
remove_three = Species ~ Petal.Length
)
# Note that the lg_model is the object created further above.
dimension_models <- workflow_set(preproc = dimension,
models = list(logistic = lg_model))
dimension_models
# Get info on a specific workflow
extract_workflow(dimension_models,
id = "remove_one_logistic")
dimension_models <- dimension_models %>%
mutate(fit = map(info, ~ fit(.x$workflow[[1]], iris_train)))
dimension_models
dimension_models[["info"]]
View(dimension_models)
View(dimension_models[[2]][[1]])
View(dimension_models[[4]][[1]])
View(dimension_models[[5]][[1]])
View(dimension_models[[5]][[1]])
dimension_models[[5]][[1]]
dimension_models
dimension_models %>% extract_fit_parsnip()
dimension_models #%>% extract_fit_parsnip()
dimension_models %>% extract_fit_parsnip(id = wflow_id)
dimension_models %>% extract_fit_parsnip(id = "wflow_id")
dimension_models %>% tidy()
dimension_models
dimension_models[[fit]]
dimension_models[["fit"]]
dimension_models[["fit"]] %>% tid()
dimension_models[["fit"]] %>% tidy()
dimension_models["fit"] %>% tidy()
dimension_models[["fit"]]
dimension_models
dimension_models %>% tidy(id = "remove_one_logistic")
dimension_models[["fit"]] %>% tidy(id = "remove_one_logistic")
dimension_models
dimension_models <- dimension_models %>%
mutate(fit = map(info, ~ fit(.x$workflow[[1]], data = iris_train)),
predict = map(info, ~ predict(.x$fit[[1]], new_data = iris_train)))
dimension_models <- dimension_models %>%
mutate(fit = map(info, ~ fit(.x$workflow[[1]], data = iris_train))) %>%
mutate(predict = map(info, ~ predict(.x$fit[[1]], new_data = iris_train)))
dimension_models
dimension_models[["info"]]
dimension_models[["fit"]]
dimension_models <- dimension_models %>%
mutate(fit = map(info, ~ fit(.x$workflow[[1]], data = iris_train))) %>%
mutate(predict = map(fit, ~ predict(.x, new_data = iris_train)))
dimension_models[["fit"]]
dimension_models <- dimension_models %>%
mutate(fit = map(info, ~ fit(.x$workflow[[1]], data = iris_train))) %>%
mutate(predict = map(fit, ~ predict(.x, new_data = iris_train)))
dimension_models
dimension_models[["predict"]]
dimension_models <- dimension_models %>%
mutate(fit = map(info, ~ fit(.x$workflow[[1]], data = iris_train))) %>%
mutate(predict = map(fit, ~ predict(.x, new_data = iris_test)))
dimension_models[["predict"]]
dimension_models[["predict"]] %>% unnest()
dimension_models %>% select(predict) %>% unnest()
dimension_models %>% unnest(cols = predict)
dimension_models %>%
unnest(cols = predict) %>%
select(wflow_id, .pred_class)
dimension_models %>%
unnest(cols = predict) %>%
select(wflow_id, .pred_class) %>%
group_by(wflor_id) %>%
bind_cols(iris_test %>%
select(Species))
dimension_models %>%
unnest(cols = predict) %>%
select(wflow_id, .pred_class) %>%
group_by(wflow_id) %>%
bind_cols(iris_test %>%
select(Species))
?bind_cols
dimension_models %>%
unnest(cols = predict) %>%
select(wflow_id, .pred_class) %>%
group_by(wflow_id) %>%
bind_cols(iris_test %>%
select(Species),
iris_test %>%
select(Species),
iris_test %>%
select(Species))
dimension_models %>%
unnest(cols = predict) %>%
select(wflow_id, .pred_class) %>%
add_column(iris_test %>% select(Species))
dimension_models %>%
unnest(cols = predict) %>%
select(wflow_id, .pred_class) %>%
cbind(iris_test %>% select(Species))
dimension_models %>%
unnest(cols = predict) %>%
select(wflow_id, .pred_class) %>%
cbind(iris_test %>% select(Species)) %>%
mutate(correc_pre = case_when(.pred_class == Species ~ TRUE,
TRUE ~ FALSE))
dimension_models %>%
unnest(cols = predict) %>%
select(wflow_id, .pred_class) %>%
cbind(iris_test %>% select(Species)) %>%
mutate(corretc_pred = case_when(.pred_class == Species ~ TRUE,
TRUE ~ FALSE)) %>%
group_by(wflow_id) %>%
summarise(percentage_true = mean(correct_pred) * 100)
dimension_models %>%
unnest(cols = predict) %>%
select(wflow_id, .pred_class) %>%
cbind(iris_test %>% select(Species)) %>%
mutate(correct_pred = case_when(.pred_class == Species ~ TRUE,
TRUE ~ FALSE)) %>%
group_by(wflow_id) %>%
summarise(percentage_true = mean(correct_pred) * 100)
dimension_models %>%
unnest(cols = predict) %>%
select(wflow_id, .pred_class) %>%
cbind(iris_test %>% select(Species)) %>%
mutate(correct_pred = case_when(.pred_class == Species ~ TRUE,
TRUE ~ FALSE)) %>% View()
dimension_models %>%
unnest(cols = predict) %>%
select(wflow_id, .pred_class) %>%
cbind(iris_test %>% select(Species)) %>%
mutate(correct_pred = case_when(.pred_class == Species ~ TRUE,
TRUE ~ FALSE)) %>%
group_by(wflow_id) %>%
summarise(percentage_true = mean(correct_pred) * 100)
dimension_models %>%
unnest(cols = predict) %>%
select(wflow_id, .pred_class) %>%
cbind(iris_test %>% select(Species))
dimension_models %>%
unnest(cols = predict) %>%
select(wflow_id, .pred_class) %>%
cbind(iris_test %>% select(Species)) %>%
group_by(wflow_id) %>%
accuracy(truth = Species,
predictd = .pred_class)
?accuracy
dimension_models %>%
unnest(cols = predict) %>%
select(wflow_id, .pred_class) %>%
cbind(iris_test %>% select(Species)) %>%
group_by(wflow_id) %>%
yardstick::accuracy(truth = Species, estimate = .pred_class)
#### OLD #####
?recipe
colnames(iris)
?workflow_set
set.seed(1337)
library("tidymodels")
tidymodels::tidymodels_prefer()
data("iris")
iris <- iris %>%
tibble::as_tibble() %>%
filter(Species != "setosa") %>%
droplevels()
iris_split <- initial_split(iris, prop = 0.90)
iris_train <- training(iris_split)
iris_test <- testing(iris_split)
SL_rec <- recipe(Species ~ Sepal.Length,
data = iris_train)
SLW_rec <- recipe(Species ~ Sepal.Length + Sepal.Width,
data = iris_train)
PL_rec <- recipe(Species ~ Petal.Length,
data = iris_train)
PLW_rec <- recipe(Species ~ Petal.Length + Petal.Width,
data = iris_train)
interaction_rec <- recipe(Species ~ Sepal.Length:Sepal.Width + Petal.Length:Petal.Width,
data = iris_train)
interaction_rec <- recipe(Species ~,
SL_rec <- recipe(Species ~ Sepal.Length,
data = iris_train)
SLW_rec <- recipe(Species ~ Sepal.Length + Sepal.Width,
data = iris_train)
PL_rec <- recipe(Species ~ Petal.Length,
data = iris_train)
PLW_rec <- recipe(Species ~ Petal.Length + Petal.Width,
data = iris_train)
interaction_rec <- recipe(Species ~ Sepal.Length*Sepal.Width + Petal.Length*Petal.Width,
data = iris_train)
SL_rec <- recipe(Species ~ Sepal.Length,
data = iris_train)
SLW_rec <- recipe(Species ~ Sepal.Length + Sepal.Width,
data = iris_train)
SLW_int_rec <- recipe(Species ~ Sepal.Length + Sepal.Width,
data = iris_train) %>%
step_interact(~ Sepal.Length:Sepal.Width)
PL_rec <- recipe(Species ~ Petal.Length,
data = iris_train)
PLW_rec <- recipe(Species ~ Petal.Length + Petal.Width,
data = iris_train)
PLW_int_rec <- recipe(Species ~ Petal.Length + Petal.Width,
data = iris_train) %>%
step_interact(~ Petal.Length:Petal.Width)
recipe_list <- list(SL = SL_rec,
SLW = SLW_rec,
SLW_int = SLW_int_rec,
PL = PL_rec,
PLW = PLW_rec,
PLW_int = PLW_int_rec)
lg_models <- workflow_set(preproc = recipe_list,
models = list(logistic = lg_model()),
cross = FALSE)
lg_models <- workflow_set(preproc = recipe_list,
models = list(logistic = logistic_reg()),
cross = FALSE)
SL_rec <- recipe(Species ~ Sepal.Length,
data = iris_train)
SLW_rec <- recipe(Species ~ Sepal.Length + Sepal.Width,
data = iris_train)
SLW_int_rec <- recipe(Species ~ Sepal.Length + Sepal.Width,
data = iris_train) %>%
step_interact(~ Sepal.Length:Sepal.Width)
PL_rec <- recipe(Species ~ Petal.Length,
data = iris_train)
PLW_rec <- recipe(Species ~ Petal.Length + Petal.Width,
data = iris_train)
PLW_int_rec <- recipe(Species ~ Petal.Length + Petal.Width,
data = iris_train) %>%
step_interact(~ Petal.Length:Petal.Width)
recipe_list <- list(SL = SL_rec,
SLW = SLW_rec,
SLW_int = SLW_int_rec,
PL = PL_rec,
PLW = PLW_rec,
PLW_int = PLW_int_rec)
lg_models <- workflow_set(preproc = recipe_list,
models = list(logistic = logistic_reg()),
cross = FALSE)
iris_folds
iris_folds <- vfold_cv(iris_train,
v = 10)
iris_folds
lg_models <- lg_models %>%
workflow_map("fit_resamples",
resamples = iris_folds,
control = keep_pred,
seed = 1337,
verbose = TRUE)
?control_resamples
# To save the predicted values and used workflows
keep_pred <- control_resamples(save_pred = TRUE, save_workflow = TRUE)
lg_models <- lg_models %>%
workflow_map("fit_resamples",
resamples = iris_folds,
control = keep_pred,
seed = 1337,
verbose = TRUE)
lg_models
collect_metrics(lg_models)
collect_metrics(lg_models) %>%
select(-c(.config))
collect_metrics(lg_models) %>%
select(-c(.config, preproc))
collect_metrics(lg_models) %>%
select(-c(.config, preproc, .estomator))
collect_metrics(lg_models) %>%
select(-c(.config, preproc, .estimator))
collect_metrics(lg_models) %>%
select(-c(.config, preproc, .estimator)) %>%
filter(-metric == "accuracy") %>%
arrange(.metric)
collect_metrics(lg_models) %>%
select(-c(.config, preproc, .estimator)) %>%
filter(metric == "accuracy") %>%
arrange(.metric)
collect_metrics(lg_models) %>%
select(-c(.config, preproc, .estimator)) %>%
filter(.metric == "accuracy") %>%
arrange(.metric)
collect_metrics(lg_models) %>%
select(-c(.config, preproc, .estimator)) %>%
filter(.metric == "accuracy") %>%
arrange(-.metric)
collect_metrics(lg_models) %>%
select(-c(.config, preproc, .estimator)) %>%
filter(.metric == "accuracy") %>%
arrange(desc(.metric))
collect_metrics(lg_models) %>%
select(-c(.config, preproc, .estimator)) %>%
filter(.metric == "accuracy") %>%
arrange(desc(mean))
collect_metrics(lg_models) %>%
select(-c(.config, preproc, .estimator)) %>%
#filter(.metric == "") %>%
arrange(desc(mean))
collect_metrics(lg_models) %>%
select(-c(.config, preproc, .estimator)) %>%
filter(.metric == "roc_auc") %>%
arrange(desc(mean))
collect_metrics(lg_models) %>%
select(-c(.config, preproc, .estimator)) %>%
filter(.metric == "accuracy") %>%
arrange(desc(mean))
collect_metrics(lg_models) %>%
select(-c(.config, preproc, .estimator)) %>%
filter(.metric == "roc_auc") %>%
arrange(desc(mean))
lg_models %>%
autoplot(metric = "accuracy")
lg_models %>%
autoplot(metric = "accuracy") +
geom_label(aes(label = wflow_id))
lg_models %>%
autoplot(metric = "accuracy") +
geom_label(aes(label = wflow_id), show.legend = FALSE)
lg_models %>%
autoplot(metric = "accuracy") +
geom_label(aes(label = wflow_id)) +
theme(legend.position = "none")
lg_models %>%
autoplot(metric = "accuracy") +
geom_label(aes(label = wflow_id)) +
theme(legend.position = "none") +
expand_limits(x = 5)
lg_models %>%
autoplot(metric = "accuracy") +
geom_label(aes(label = wflow_id)) +
theme(legend.position = "none") +
expand_limits(x = 1)
lg_models %>%
autoplot(metric = "accuracy") +
geom_label(aes(label = wflow_id)) +
theme(legend.position = "none") +
expand_limits(x = 10)
lg_models %>%
autoplot(metric = "accuracy") +
geom_label(aes(label = wflow_id)) +
theme(legend.position = "none") +
expand_limits(x = c(1,1))
lg_models %>%
autoplot(metric = "accuracy") +
geom_label(aes(label = wflow_id)) +
theme(legend.position = "none") +
expand_limits(x = c(10, 10))
lg_models %>%
autoplot(metric = "accuracy") +
geom_label(aes(label = wflow_id)) +
theme(legend.position = "none") +
xlim(c(0, 8))
lg_models %>%
autoplot(metric = "accuracy") +
geom_label(aes(label = wflow_id)) +
theme(legend.position = "none") +
xlim(c(1, 7))
lg_models %>%
autoplot(metric = "accuracy") +
geom_label(aes(label = wflow_id)) +
theme(legend.position = "none") +
xlim(c(0, 6.5))
lg_models %>%
autoplot(metric = "accuracy") +
geom_label(aes(label = wflow_id)) +
theme(legend.position = "none") +
xlim(c(0.5, 6.5))
lg_models %>%
autoplot(metric = "accuracy") +
geom_text_repel(aes(label = wflow_id)) +
theme(legend.position = "none") +
xlim(c(0.5, 6.5))
lg_models %>%
autoplot(metric = "accuracy") +
geom_label(aes(label = wflow_id),
position=position_jitter(width=1,height=1)) +
theme(legend.position = "none") +
xlim(c(0.5, 6.5))
lg_models %>%
autoplot(metric = "accuracy") +
geom_label(aes(label = wflow_id),
position=position_jitter(width=0.4,height=0.4)) +
theme(legend.position = "none") +
xlim(c(0.5, 6.5))
lg_models %>%
autoplot(metric = "accuracy") +
geom_label(aes(label = wflow_id),
position=position_jitter(width=0.1,height=0.1)) +
theme(legend.position = "none") +
xlim(c(0.5, 6.5))
?geom_label
lg_models %>%
autoplot(metric = "accuracy") +
geom_label(aes(label = wflow_id)) +
theme(legend.position = "none") +
xlim(c(0.5, 6.5))
lg_models %>%
autoplot(metric = "accuracy") +
geom_text(aes(label = wflow_id)) +
theme(legend.position = "none") +
xlim(c(0.5, 6.5))
lg_models %>%
autoplot(metric = "accuracy") +
geom_text(aes(label = wflow_id), check_overlap = TRUE) +
theme(legend.position = "none") +
xlim(c(0.5, 6.5))
lg_models %>%
autoplot(metric = "accuracy") +
geom_text(aes(label = wflow_id), nudge_x = 0.1, nudge_y = 0.1,
check_overlap = TRUE) +
theme(legend.position = "none") +
xlim(c(0.5, 6.5))
lg_models %>%
autoplot(metric = "accuracy") +
geom_text(aes(label = wflow_id),
nudge_x = 0.5,
nudge_y = 0.01,
check_overlap = TRUE) +
theme(legend.position = "none") +
xlim(c(0.5, 6.5))
lg_models %>%
autoplot(metric = "accuracy") +
geom_text(aes(label = wflow_id),
nudge_x = 0.3,
nudge_y = 0.005,
check_overlap = TRUE) +
theme(legend.position = "none") +
xlim(c(0.5, 6.5))
lg_models %>%
autoplot(metric = "accuracy") +
geom_text(aes(label = wflow_id),
check_overlap = TRUE) +
theme(legend.position = "none") +
xlim(c(0.5, 6.5))
lg_models %>%
autoplot(metric = "accuracy") +
geom_label(aes(label = wflow_id)) +
theme(legend.position = "none") +
xlim(c(0.5, 6.5))
lg_models %>%
autoplot(metric = "roc_auc")
View(lg_models)
View(lg_models[[2]][[1]])
View(lg_models[[4]][[1]])
View((lg_models[[4]][[1]])[[3]][[1]])
View((lg_models[[4]][[1]])[[5]][[1]])
(lg_models[[4]][[1]])[[5]][[1]]
(lg_models[[4]][[1]])[[5]][[1]] %>%
autoplot(metric = "roc_auc")
(lg_models[[4]][[1]])[[5]][[1]] %>%
autoplot()
?autoplot
(lg_models[[4]][[1]])[[5]][[1]] %>%
parsnip::autoplot()
(lg_models[[4]][[1]])[[5]][[1]] %>%
ggplot2::autoplot()
(lg_models[[4]][[1]])[[5]][[1]] %>%
as.data.frame() %>%
ggplot2::autoplot()
collect_metrics(lg_models) %>%
select(-c(.config, preproc, .estimator)) %>%
filter(.metric == "roc_auc")
collect_metrics(lg_models) %>%
select(-c(.config, preproc, .estimator)) %>%
filter(.metric == "roc_auc") %>%
autoplot()
lg_models %>%
autoplot(metric = "accuracy") +
geom_label(aes(label = wflow_id)) +
theme(legend.position = "none") +
xlim(c(0.5, 6.5))
collect_metrics(lg_models) %>%
select(-c(.config, preproc, .estimator)) %>%
filter(.metric == "roc_auc")
collect_extracts(lg_models)
collect_predictions(lg_models)
collect_predictions(lg_models) %>% View()
lg_models %>%
collect_predictions() %>%
roc_curve(truth = Species)
?roc_curve
iris
iris %>% str()
lg_models %>%
collect_predictions() %>%
roc_curve(truth = Species,
.pred_versicolor)
lg_models %>%
collect_predictions() %>%
roc_curve(truth = Species,
.pred_versicolor) %>%
autoplot
lg_models %>%
autoplot(metric = "accuracy") +
geom_label(aes(label = wflow_id)) +
theme(legend.position = "none") +
xlim(c(0.5, 6.5))
lg_models %>%
collect_predictions() %>%
roc_curve(truth = Species,
.pred_versicolor) %>%
autoplot()
