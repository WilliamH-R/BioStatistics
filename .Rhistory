PLW_int = PLW_int_rec)
lg_models <- workflow_set(preproc = recipe_list,
models = list(logistic = logistic_reg()),
cross = FALSE)
iris_folds
iris_folds <- vfold_cv(iris_train,
v = 10)
iris_folds
lg_models <- lg_models %>%
workflow_map("fit_resamples",
resamples = iris_folds,
control = keep_pred,
seed = 1337,
verbose = TRUE)
?control_resamples
# To save the predicted values and used workflows
keep_pred <- control_resamples(save_pred = TRUE, save_workflow = TRUE)
lg_models <- lg_models %>%
workflow_map("fit_resamples",
resamples = iris_folds,
control = keep_pred,
seed = 1337,
verbose = TRUE)
lg_models
collect_metrics(lg_models)
collect_metrics(lg_models) %>%
select(-c(.config))
collect_metrics(lg_models) %>%
select(-c(.config, preproc))
collect_metrics(lg_models) %>%
select(-c(.config, preproc, .estomator))
collect_metrics(lg_models) %>%
select(-c(.config, preproc, .estimator))
collect_metrics(lg_models) %>%
select(-c(.config, preproc, .estimator)) %>%
filter(-metric == "accuracy") %>%
arrange(.metric)
collect_metrics(lg_models) %>%
select(-c(.config, preproc, .estimator)) %>%
filter(metric == "accuracy") %>%
arrange(.metric)
collect_metrics(lg_models) %>%
select(-c(.config, preproc, .estimator)) %>%
filter(.metric == "accuracy") %>%
arrange(.metric)
collect_metrics(lg_models) %>%
select(-c(.config, preproc, .estimator)) %>%
filter(.metric == "accuracy") %>%
arrange(-.metric)
collect_metrics(lg_models) %>%
select(-c(.config, preproc, .estimator)) %>%
filter(.metric == "accuracy") %>%
arrange(desc(.metric))
collect_metrics(lg_models) %>%
select(-c(.config, preproc, .estimator)) %>%
filter(.metric == "accuracy") %>%
arrange(desc(mean))
collect_metrics(lg_models) %>%
select(-c(.config, preproc, .estimator)) %>%
#filter(.metric == "") %>%
arrange(desc(mean))
collect_metrics(lg_models) %>%
select(-c(.config, preproc, .estimator)) %>%
filter(.metric == "roc_auc") %>%
arrange(desc(mean))
collect_metrics(lg_models) %>%
select(-c(.config, preproc, .estimator)) %>%
filter(.metric == "accuracy") %>%
arrange(desc(mean))
collect_metrics(lg_models) %>%
select(-c(.config, preproc, .estimator)) %>%
filter(.metric == "roc_auc") %>%
arrange(desc(mean))
lg_models %>%
autoplot(metric = "accuracy")
lg_models %>%
autoplot(metric = "accuracy") +
geom_label(aes(label = wflow_id))
lg_models %>%
autoplot(metric = "accuracy") +
geom_label(aes(label = wflow_id), show.legend = FALSE)
lg_models %>%
autoplot(metric = "accuracy") +
geom_label(aes(label = wflow_id)) +
theme(legend.position = "none")
lg_models %>%
autoplot(metric = "accuracy") +
geom_label(aes(label = wflow_id)) +
theme(legend.position = "none") +
expand_limits(x = 5)
lg_models %>%
autoplot(metric = "accuracy") +
geom_label(aes(label = wflow_id)) +
theme(legend.position = "none") +
expand_limits(x = 1)
lg_models %>%
autoplot(metric = "accuracy") +
geom_label(aes(label = wflow_id)) +
theme(legend.position = "none") +
expand_limits(x = 10)
lg_models %>%
autoplot(metric = "accuracy") +
geom_label(aes(label = wflow_id)) +
theme(legend.position = "none") +
expand_limits(x = c(1,1))
lg_models %>%
autoplot(metric = "accuracy") +
geom_label(aes(label = wflow_id)) +
theme(legend.position = "none") +
expand_limits(x = c(10, 10))
lg_models %>%
autoplot(metric = "accuracy") +
geom_label(aes(label = wflow_id)) +
theme(legend.position = "none") +
xlim(c(0, 8))
lg_models %>%
autoplot(metric = "accuracy") +
geom_label(aes(label = wflow_id)) +
theme(legend.position = "none") +
xlim(c(1, 7))
lg_models %>%
autoplot(metric = "accuracy") +
geom_label(aes(label = wflow_id)) +
theme(legend.position = "none") +
xlim(c(0, 6.5))
lg_models %>%
autoplot(metric = "accuracy") +
geom_label(aes(label = wflow_id)) +
theme(legend.position = "none") +
xlim(c(0.5, 6.5))
lg_models %>%
autoplot(metric = "accuracy") +
geom_text_repel(aes(label = wflow_id)) +
theme(legend.position = "none") +
xlim(c(0.5, 6.5))
lg_models %>%
autoplot(metric = "accuracy") +
geom_label(aes(label = wflow_id),
position=position_jitter(width=1,height=1)) +
theme(legend.position = "none") +
xlim(c(0.5, 6.5))
lg_models %>%
autoplot(metric = "accuracy") +
geom_label(aes(label = wflow_id),
position=position_jitter(width=0.4,height=0.4)) +
theme(legend.position = "none") +
xlim(c(0.5, 6.5))
lg_models %>%
autoplot(metric = "accuracy") +
geom_label(aes(label = wflow_id),
position=position_jitter(width=0.1,height=0.1)) +
theme(legend.position = "none") +
xlim(c(0.5, 6.5))
?geom_label
lg_models %>%
autoplot(metric = "accuracy") +
geom_label(aes(label = wflow_id)) +
theme(legend.position = "none") +
xlim(c(0.5, 6.5))
lg_models %>%
autoplot(metric = "accuracy") +
geom_text(aes(label = wflow_id)) +
theme(legend.position = "none") +
xlim(c(0.5, 6.5))
lg_models %>%
autoplot(metric = "accuracy") +
geom_text(aes(label = wflow_id), check_overlap = TRUE) +
theme(legend.position = "none") +
xlim(c(0.5, 6.5))
lg_models %>%
autoplot(metric = "accuracy") +
geom_text(aes(label = wflow_id), nudge_x = 0.1, nudge_y = 0.1,
check_overlap = TRUE) +
theme(legend.position = "none") +
xlim(c(0.5, 6.5))
lg_models %>%
autoplot(metric = "accuracy") +
geom_text(aes(label = wflow_id),
nudge_x = 0.5,
nudge_y = 0.01,
check_overlap = TRUE) +
theme(legend.position = "none") +
xlim(c(0.5, 6.5))
lg_models %>%
autoplot(metric = "accuracy") +
geom_text(aes(label = wflow_id),
nudge_x = 0.3,
nudge_y = 0.005,
check_overlap = TRUE) +
theme(legend.position = "none") +
xlim(c(0.5, 6.5))
lg_models %>%
autoplot(metric = "accuracy") +
geom_text(aes(label = wflow_id),
check_overlap = TRUE) +
theme(legend.position = "none") +
xlim(c(0.5, 6.5))
lg_models %>%
autoplot(metric = "accuracy") +
geom_label(aes(label = wflow_id)) +
theme(legend.position = "none") +
xlim(c(0.5, 6.5))
lg_models %>%
autoplot(metric = "roc_auc")
View(lg_models)
View(lg_models[[2]][[1]])
View(lg_models[[4]][[1]])
View((lg_models[[4]][[1]])[[3]][[1]])
View((lg_models[[4]][[1]])[[5]][[1]])
(lg_models[[4]][[1]])[[5]][[1]]
(lg_models[[4]][[1]])[[5]][[1]] %>%
autoplot(metric = "roc_auc")
(lg_models[[4]][[1]])[[5]][[1]] %>%
autoplot()
?autoplot
(lg_models[[4]][[1]])[[5]][[1]] %>%
parsnip::autoplot()
(lg_models[[4]][[1]])[[5]][[1]] %>%
ggplot2::autoplot()
(lg_models[[4]][[1]])[[5]][[1]] %>%
as.data.frame() %>%
ggplot2::autoplot()
collect_metrics(lg_models) %>%
select(-c(.config, preproc, .estimator)) %>%
filter(.metric == "roc_auc")
collect_metrics(lg_models) %>%
select(-c(.config, preproc, .estimator)) %>%
filter(.metric == "roc_auc") %>%
autoplot()
lg_models %>%
autoplot(metric = "accuracy") +
geom_label(aes(label = wflow_id)) +
theme(legend.position = "none") +
xlim(c(0.5, 6.5))
collect_metrics(lg_models) %>%
select(-c(.config, preproc, .estimator)) %>%
filter(.metric == "roc_auc")
collect_extracts(lg_models)
collect_predictions(lg_models)
collect_predictions(lg_models) %>% View()
lg_models %>%
collect_predictions() %>%
roc_curve(truth = Species)
?roc_curve
iris
iris %>% str()
lg_models %>%
collect_predictions() %>%
roc_curve(truth = Species,
.pred_versicolor)
lg_models %>%
collect_predictions() %>%
roc_curve(truth = Species,
.pred_versicolor) %>%
autoplot
lg_models %>%
autoplot(metric = "accuracy") +
geom_label(aes(label = wflow_id)) +
theme(legend.position = "none") +
xlim(c(0.5, 6.5))
lg_models %>%
collect_predictions() %>%
roc_curve(truth = Species,
.pred_versicolor) %>%
autoplot()
dada2.phyloseq <- readRDS("~/Repo/BioStatistics/data/count_matrix/dada2.phyloseq.rds")
View(dada2.phyloseq)
?psmelt
physeq_df <- dada2.phyloseq %>% psmelt()
set.seed(1337)
library("tidymodels")
tidymodels::tidymodels_prefer()
physeq_df <- dada2.phyloseq %>% psmelt()
View(physeq_df)
set.seed(1337)
library("tidymodels")
tidymodels::tidymodels_prefer()
data("iris")
iris <- iris |>
tibble::as_tibble() |>
filter(Species != "setosa") |>
droplevels()
View(iris)
count_matrix <- readRDS("data/count_matrix/count_matrix.rds")
count_matrix
count_matrix_test
count_matrix_test <- count_matrix |>
slice_head(n = 10) |>
select(Actinomyces, Adlercreutzia,
Agathobacter, Akkermansia, Alistipes)
count_matrix_test
count_matrix_test <- count_matrix |>
slice_head(n = 10) |>
select(Sample, Actinomyces, Adlercreutzia,
Agathobacter, Akkermansia, Alistipes)
count_matrix_test
rm(iris)
saveRDS(object = count_matrix_test,
file = "data/count_matrix/count_matrix_test.rds")
View(count_matrix_test)
library(vegan)
count_matrix_test
count_matrix_test |>
specnumber()
specnumber(count_matrix_test)
?specnumber
count_matrix_test |>
column_to_rownames(var = "Sample") |>
specnumber()
count_matrix_test |>
column_to_rownames(var = "Sample") |>
specnumber() |>
as_tibble()
count_matrix_test |>
column_to_rownames(var = "Sample") |>
specnumber() |>
as_tibble(rownames = "Sample")
meta <- read_csv("data/metadata.txt")
meta <- read.csv("data/metadata.txt")
View(meta)
View(meta)
View(count_matrix)
meta_subset <- meta |>
select(Run, Host_disease)
View(meta_subset)
meta_subset <- meta |>
select(Run, Host_disease) |>
rename(Sample = Run)
View(meta_subset)
count_matrix_test |>
left_join(meta_subset,
by = Sample) |>
column_to_rownames(var = "Sample") |>
specnumber(groups = Host_disease) |>
as_tibble(rownames = "Sample")
count_matrix_test |>
left_join(meta_subset,
by = Sample) |>
column_to_rownames(var = "Sample") |>
specnumber(groups = "Host_disease") |>
as_tibble(rownames = "Sample")
count_matrix_test |>
left_join(meta_subset,
by = Sample) |>
column_to_rownames(var = "Sample") |>
specnumber(groups = "Host_disease")
count_matrix_test |>
left_join(meta_subset,
by = Sample) |> View()
count_matrix_test |>
left_join(meta_subset,
by = "Sample") |>
column_to_rownames(var = "Sample") |>
specnumber(groups = "Host_disease") |>
as_tibble(rownames = "Sample")
count_matrix_test |>
column_to_rownames(var = "Sample") |>
specnumber() |>
as_tibble(rownames = "Sample")
meta_subset <- meta |>
select(Run, Host_disease) |>
rename(Sample = Run)
View(meta_subset)
count_matrix_test |>
left_join(meta_subset,
by = Sample) |>
column_to_rownames(var = "Sample") |>
specnumber(groups = meta_subset) |>
as_tibble(rownames = "Sample")
count_matrix_test |>
left_join(meta_subset,
by = "Sample") |>
column_to_rownames(var = "Sample") |>
specnumber(groups = meta_subset) |>
as_tibble(rownames = "Sample")
meta_subset <- meta |>
select(Run, Host_disease) |>
rename(Sample = Run) |>
slice_head(n = 10)
count_matrix_test |>
left_join(meta_subset,
by = "Sample") |>
column_to_rownames(var = "Sample") |>
specnumber(groups = meta_subset) |>
as_tibble(rownames = "Sample")
meta_subset <- meta |>
select(Run, Host_disease) |>
rename(Sample = Run) |>
slice_head(n = 10) |>
pull(Host_disease)
count_matrix_test |>
left_join(meta_subset,
by = "Sample") |>
column_to_rownames(var = "Sample") |>
specnumber(groups = meta_subset) |>
as_tibble(rownames = "Sample")
meta_subset
count_matrix_test |>
left_join(meta_subset,
by = "Sample") |>
column_to_rownames(var = "Sample") |>
specnumber(groups = meta_subset, copy = TRUE) |>
as_tibble(rownames = "Sample")
count_matrix_test |>
column_to_rownames(var = "Sample") |>
specnumber(groups = meta_subset) |>
as_tibble(rownames = "Sample")
count_matrix_test |>
column_to_rownames(var = "Sample") |>
specnumber(groups = meta_subset) |>
as_tibble(rownames = "Sample")
meta_subset <- meta |>
select(Run, Host_disease) |>
rename(Sample = Run) |>
slice_head(n = 10)
count_matrix_test |>
column_to_rownames(var = "Sample") |>
specnumber(groups = meta_subset) |>
as_tibble(rownames = "Sample")
View(meta_subset)
View(count_matrix)
View(meta)
meta_subset <- meta |>
select(Run, host_sex) |>
rename(Sample = Run) |>
slice_head(n = 10)
count_matrix_test |>
column_to_rownames(var = "Sample") |>
specnumber(groups = meta_subset) |>
as_tibble(rownames = "Sample")
meta_subset <- meta |>
select(Run, host_sex) |>
rename(Sample = Run) |>
slice_head(n = 10) |>
pull(host_sex)
count_matrix_test |>
column_to_rownames(var = "Sample") |>
specnumber(groups = meta_subset) |>
as_tibble(rownames = "Sample")
count_matrix_test |>
column_to_rownames(var = "Sample") |>
diversity(index = "shannon")
count_matrix_test |>
column_to_rownames(var = "Sample") |>
diversity(index = "shannon") |>
as_tibble(rownames = "Sample")
count_matrix |>
slice_head(n = 10) |>
select(Sample, Actinomyces,
Adlercreutzia, Agathobacter, Akkermansia)
# Create a small subset used for testing
count_matrix_test <- count_matrix |>
slice_head(n = 10) |>
select(Sample, Actinomyces,
Adlercreutzia, Agathobacter, Akkermansia)
saveRDS(object = count_matrix_test,
file = "data/count_matrix/count_matrix_test.rds")
library("tidymodels")
tidymodels::tidymodels_prefer()
count_matrix_test <- count_matrix |>
slice_head(n = 10) |>
select(Sample, Actinomyces,
Adlercreutzia, Agathobacter, Akkermansia)
count_matrix_test
count_matrix_test <- readRDS(file = "data/count_matrix/count_matrix_test.rds")
count_matrix_test
count_matrix_test |>
column_to_rownames(var = "Sample") |>
specnumber() |>
as_tibble(rownames = "Sample")
count_matrix_test |>
column_to_rownames(var = "Sample") |>
diversity(index = "shannon") |>
as_tibble(rownames = "Sample")
richness <- count_matrix_test |>
column_to_rownames(var = "Sample") |>
specnumber() |>
as_tibble(rownames = "Sample")
count_matrix_test |>
left_join(richness,
by = "Sample")
richness <- count_matrix_test |>
column_to_rownames(var = "Sample") |>
specnumber() |>
as_tibble(rownames = "Sample")
count_matrix_test |>
left_join(richness,
by = "Sample")
richness <- count_matrix_test |>
column_to_rownames(var = "Sample") |>
specnumber() |>
rename(Richness = value) |>
as_tibble(rownames = "Sample")
richness <- count_matrix_test |>
column_to_rownames(var = "Sample") |>
specnumber() |>
as_tibble(rownames = "Sample") |>
rename(Richness = value)
count_matrix_test |>
left_join(richness,
by = "Sample")
count_matrix_test |>
left_join(shannon,
by = "Sample")
shannon <- count_matrix_test |>
column_to_rownames(var = "Sample") |>
diversity(index = "shannon") |>
as_tibble(rownames = "Sample") |>
rename(Shannon = value)
count_matrix_test |>
left_join(shannon,
by = "Sample")
