tibble::as_tibble()
library("tidymodels")
tidymodels::tidymodels_prefer()
data <- data(iris) %>%
tibble::as_tibble()
View(data)
force(iris)
()
data <- data("iris") %>%
tibble::as_tibble()
View(data)
library("tidymodels")
tidymodels::tidymodels_prefer()
data("iris")
data <- iris %>%
tibble::as_tibble()
library("tidymodels")
tidymodels::tidymodels_prefer()
data("iris")
iris %<>% tibble::as_tibble()
library("tidymodels")
tidymodels::tidymodels_prefer()
data("iris")
iris <- iris %>%
tibble::as_tibble()
View(iris)
iris
set.seed(1337)
library("tidymodels")
tidymodels::tidymodels_prefer()
data("iris")
iris <- iris %>%
tibble::as_tibble()
iris %>%
ggplot(aes(x = Species)) +
geom_col()
iris %>%
ggplot(aes(x = Species)) +
geom_bar()
?initial_split
str(iris)
str(iris)
iris %>% head()
iris %>%
head() %>%
str()
iris %>%
slice_head(n = 5) %>%
str()
iris %>%
slice_head(n = 3) %>%
str()
iris %>%
slice_head(n = 1) %>%
str()
iris %>%
slice_head(n = 5) %>%
str()
dim(iris)
iris %>%
slice_head(n = 5) %>%
str()
iris %>%
ggplot(aes(x = Species,
color = Species)) +
geom_bar()
iris %>%
ggplot(aes(x = Species,
fill = Species)) +
geom_bar()
#| fig-cap: "Statification of species in the iris dataset"
#| fig-cap: "Statification of species in the iris dataset"
iris %>%
ggplot(aes(x = Species,
fill = Species)) +
geom_bar()
library('tidyverse')
library('dada2')
library('here')
# Set path to input trimmed files
path <- here("data/bowtie2/")
path
# Get filenames of forward and reverse reads
fnFs <- sort(list.files(path, pattern="_1.fastq.gz", full.names = TRUE))
fnRs <- gsub('_1', '_2', fnFs)
fnFs
# Set path to input trimmed files
path <- here("data/bowtie2")
# Get filenames of forward and reverse reads
fnFs <- sort(list.files(path, pattern="_1.fastq.gz", full.names = TRUE))
fnRs <- gsub('_1', '_2', fnFs)
fnFs
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
# Output for filtering
filtFs <- file.path(here(paste0("data/dada2/", sample.names, "_1_filt.fastq.gz")))
filtRs <- file.path(here(paste0("data/dada2/", sample.names, "_2_filt.fastq.gz")))
# Create empty files beforehand
create_empty_files <- function(file_list) {
for (file in file_list) {
file.create(file)
#cat(sprintf("Empty file created: %s\n", file))
}
}
create_empty_files(filtFs)
create_empty_files(filtRs)
filtFs
### Filtering ambiguous N
fastqPairedFilter_loop <- function(Freads, Rreads, Freads_filt,Rreads_filt){
for (i in 1:length(Freads)){
start_time <- Sys.time()
print(paste0(i, '/', length(Freads)))
out <- fastqPairedFilter(fn=c(fnFs[[i]], fnRs[[i]]),
fout=c(filtFs[[i]], filtRs[[i]]),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE)
print(out)
end_time <- Sys.time()
diff_time = end_time - start_time
print(paste('time:', round(diff_time,2)))
}
}
print("Filtering ambiguous 'N' from reads")
fastqPairedFilter_loop(fnFs, fnRs, filtFs, filtRs)
path
filtFs
fnFs
fnRs
library('tidyverse')
library('dada2')
library('here')
library('phyloseq'); packageVersion("phyloseq")
library('tidyverse')
library('dada2')
library('here')
#library('phyloseq'); packageVersion("phyloseq")
library('Biostrings'); packageVersion("Biostrings")
#library('ggplot2'); packageVersion("ggplot2")
#theme_set(theme_bw())
# Set path to input trimmed files
path <- here("data/bowtie2")
# Get filenames of forward and reverse reads
fnFs <- sort(list.files(path, pattern="_1.fastq.gz", full.names = TRUE))
fnRs <- gsub('_1', '_2', fnFs)
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
# Output for filtering
filtFs <- file.path(here(paste0("data/dada2/", sample.names, "_1_filt.fastq.gz")))
filtRs <- file.path(here(paste0("data/dada2/", sample.names, "_2_filt.fastq.gz")))
#names(filtFs) <- sample.names
#names(filtRs) <- sample.names
#fnFs <- fnFs[1:2]
#fnRs <-  fnRs[1:2]
#filtFs <- filtFs[1:2]
#filtRs <- filtRs[1:2]
#print(fnFs)
#print(fnRs)
#print(filtFs)
#print(filtRs)
# Create empty files beforehand
create_empty_files <- function(file_list) {
for (file in file_list) {
file.create(file)
#cat(sprintf("Empty file created: %s\n", file))
}
}
create_empty_files(filtFs)
create_empty_files(filtRs)
### Filtering ambiguous N
fastqPairedFilter_loop <- function(Freads, Rreads, Freads_filt,Rreads_filt){
for (i in 1:length(Freads)){
start_time <- Sys.time()
print(paste0(i, '/', length(Freads)))
out <- fastqPairedFilter(fn=c(fnFs[[i]], fnRs[[i]]),
fout=c(filtFs[[i]], filtRs[[i]]),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE)
print(out)
end_time <- Sys.time()
diff_time = end_time - start_time
print(paste('time:', round(diff_time,2)))
}
}
print("Filtering ambiguous 'N' from reads")
fastqPairedFilter_loop(fnFs, fnRs, filtFs, filtRs)
print("Learning errors forward reads")
errF <- learnErrors(filtFs, multithread=TRUE, verbose = TRUE)
print("Learning errors reverse reads")
errR <- learnErrors(filtFs, multithread=TRUE, verbose = TRUE)
print("Sampling inference")
dadaFs <- dada(filtFs, err=errF, multithread=TRUE)
dadaRs <- dada(filtRs, err=errR, multithread=TRUE)
### Merge paired reads
mergers <- mergePairs(dadaFs, filtFs, dadaRs, filtRs, verbose=TRUE)
print("Merging pair end reads")
seqtab <- makeSequenceTable(mergers)
seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=TRUE, verbose=TRUE)
paste0(round((1 - sum(seqtab.nochim)/sum(seqtab)) * 100,
5),
'% removed due to chimera')
baseSRAs_seqtab <- gsub("_1_filt.fastq.gz", "", rownames(seqtab.nochim))
rownames(seqtab.nochim) <- baseSRAs_seqtab
taxa <- assignTaxonomy(seqtab.nochim,
"/home/databases/SILVA2/silva_nr99_v138.1_train_set.fa.gz",
multithread=TRUE)
taxa <- addSpecies(taxa,
"/home/databases/SILVA2/silva_species_assignment_v138.1.fa.gz")
### Off to phyloseq
### Setup physeq data
meta <- read_csv(here("data/metadata.txt"))
View(meta)
meta <- meta |> filter(Run %in% baseSRAs_seqtab)
# Create sample_data object and set row/ sample_names
META = sample_data(meta)
library(phyloseq)
print("hello world")
library(phyloseq)
library(phyloseq)
library(phyloseq)
library('phyloseq'); packageVersion("phyloseq")
# Create sample_data object and set row/ sample_names
META = sample_data(meta)
rownames(META) <- meta$Run
# Create otu_table object
OTU <- otu_table(seqtab.nochim, taxa_are_rows = FALSE)
# Create tax_table object
TAXA <- tax_table(taxa)
sample_names(META) %in% sample_names(OTU)
ps <- phyloseq(OTU,
TAXA,
META)
ps <- prune_samples(sample_names(ps) != "Mock", ps) # Remove mock sample
### Renaming to ASV
dna <- Biostrings::DNAStringSet(taxa_names(ps))
names(dna) <- taxa_names(ps)
ps <- merge_phyloseq(ps, dna)
taxa_names(ps) <- paste0("ASV", seq(ntaxa(ps)))
# Saving phyloseq object
saveRDS(ps, here("data/dada2/dada2.phyloseq.rds"))
dada2.phyloseq <- readRDS("/net/mimer/mnt/tank/projects2/ljess/student_projects/s194545/BioStatistics/data/dada2/dada2.phyloseq.rds")
View(dada2.phyloseq)
dada2.phyloseq@tax_table %>% View()
dada2.phyloseq@otu_table %>% View()
physeq_df <- readRDS("data/count_matrix/dada2.phyloseq.rds") %>%
psmelt()
library("magrittr")
physeq_df <- readRDS("data/count_matrix/dada2.phyloseq.rds") %>%
psmelt()
library("phyloseq")
physeq_df <- readRDS("data/count_matrix/dada2.phyloseq.rds") %>%
psmelt()
View(physeq_df)
View(physeq_df)
colnames(physeq_df)
physeq_df <- readRDS("data/count_matrix/dada2.phyloseq.rds") %>%
psmelt() %>%
select(OTU, Sample, Abundance, chem_administration, ETHNICITY, geo_loc_name,
Host_age, host_body_mass_index, Host_disease, host_phenotype, host_sex,
Kingdom, Phylum, Class, Order, Family, Genus, Species)
library("dplyr")
physeq_df <- readRDS("data/count_matrix/dada2.phyloseq.rds") %>%
psmelt() %>%
select(OTU, Sample, Abundance, chem_administration, ETHNICITY, geo_loc_name,
Host_age, host_body_mass_index, Host_disease, host_phenotype, host_sex,
Kingdom, Phylum, Class, Order, Family, Genus, Species)
physeq_df %>% distinct(Genus)
physeq_df %>% distinct(Species)
physeq_df %>% nrow()
physeq_df %>% drop_na() %>% nrow()
library("tidyr")
physeq_df %>% nrow()
physeq_df %>% drop_na() %>% nrow()
physeq_df %>% nrow() - physeq_df %>% drop_na() %>% nrow()
# Load data object and select needed objects
physeq_df <- readRDS("data/dada2/dada2.phyloseq.rds") %>%
psmelt() %>%
select(Sample, Abundance, Kingdom, Phylum,
Class, Order, Family, Genus, Species)
# Amalgamate to genus level, too many unknown species
physeq_df %>%
group_by(Sample, Genus) %>%
summarize(count = sum(Abundance)) %>% View()
rm(physeq_df)
source("/net/mimer/mnt/tank/projects2/ljess/student_projects/s194545/BioStatistics/src/07_clean_phyloseq.R", echo=TRUE)
?pivot_wider
# Pivot wider which creates count matrix
physeq_tbl_amal %>%
pivot_wider(names_from = Genus,
values_from = Abundance,
values_fill = 0) %>% View()
# Amalgamate to genus level, too many unknown species
physeq_tbl_amal <- physeq_tbl %>%
group_by(Sample,
Genus) %>%
summarize(Abundance = sum(Abundance))
# Pivot wider which creates count matrix
physeq_tbl_amal %>%
pivot_wider(names_from = Genus,
values_from = Abundance,
values_fill = 0) %>% View()
View(physeq_tbl_amal)
# Pivot wider which creates count matrix
physeq_tbl_amal %>%
pivot_wider(names_from = Genus,
values_from = Abundance,
values_fill = 0) %>% View()
source("/net/mimer/mnt/tank/projects2/ljess/student_projects/s194545/BioStatistics/src/07_clean_phyloseq.R", echo=TRUE)
View(physeq_tbl_amal)
# Pivot wider which creates count matrix
physeq_tbl_amal %>%
pivot_wider(names_from = Genus,
values_from = Abundance,
values_fill = 0) %>% View()
# Pivot wider which creates count matrix
count_matrix <- physeq_tbl_amal %>%
pivot_wider(names_from = Genus,
values_from = Abundance,
values_fill = 0)
library("tibble")
View(count_matrix)
# Pivot wider which creates count matrix
count_matrix <- physeq_tbl_amal %>%
pivot_wider(names_from = Genus,
values_from = Abundance,
values_fill = 0) %>%
column_to_rownames(var = "Sample")
library("DAtest")
View(physeq_tbl_amal)
# Drop Genus present in less than 10% of samples
physeq_tbl_amal %>%
group_by(Genus) %>%
summarise(n = n()) %>% View()
# Drop Genus present in less than 10% of samples
physeq_tbl_amal %>%
group_by(Genus) %>%
tally() %>% View()
# Drop Genus present in less than 10% of samples
physeq_tbl_amal %>%
group_by(Genus) %>%
add_count() %>% View()
# Drop Genus present in less than 10% of samples
physeq_tbl_amal %>%
group_by(Genus) %>%
add_count(name = Count) %>% View()
# Drop Genus present in less than 10% of samples
physeq_tbl_amal %>%
group_by(Genus) %>%
add_count(name = "Count") %>% View()
# Drop Genus present in less than 10% of samples
physeq_tbl_amal %>%
#group_by(Genus) %>%
add_count(wt = Genus, name = "Count") %>% View()
# Drop Genus present in less than 10% of samples
physeq_tbl_amal %>%
#group_by(Genus) %>%
add_count(wt = Genus, name = "Count")
# Drop Genus present in less than 10% of samples
physeq_tbl_amal %>%
group_by(Genus) %>%
count(name = "Count",
.drop = FALSE) %>% View()
# Drop Genus present in less than 10% of samples
physeq_tbl_amal %>%
group_by(Genus) %>%
add_count(name = "Count") %>% View()
# Drop Genus present in less than 10% of samples
physeq_tbl_amal %>%
#group_by(Genus) %>%
add_count(name = "Count") %>% View()
# Drop Genus present in less than 10% of samples
physeq_tbl_amal %>%
group_by(Genus) %>%
add_count(name = "Count") %>% View()
physeq_tbl_amal %>% filter(Genus == "Acetanaerobacterium") %>% nrow()
# Drop Genus present in less than 10% of samples
physeq_tbl_amal %>%
group_by(Genus) %>%
add_count(name = "Count") %>%
mutate(Count_zero = rowSums(select(., Abundance) != 0)) %>% View()
# Drop Genus present in less than 10% of samples
physeq_tbl_amal %>%
group_by(Genus) %>%
add_count(name = "Count") %>%
ungroup() %>%
mutate(Count_zero = rowSums(select(., Abundance) != 0)) %>% View()
# Drop Genus present in less than 10% of samples
physeq_tbl_amal %>%
group_by(Genus) %>%
add_count(name = "Count") %>%
mutate(Count_zero = rowSums(select(., Abundance) != 0)) %>% View()
# Drop Genus present in less than 10% of samples
physeq_tbl_amal %>%
group_by(Genus) %>%
add_count(name = "Count") %>%
mutate(Count_zero = rowSums(select(., Abundance) != 0))
# Drop Genus present in less than 10% of samples
physeq_tbl_amal %>%
group_by(Genus) %>%
add_count(name = "Count") %>%
mutate(Count_zero = rowSums(select(Abundance) != 0))
# Drop Genus present in less than 10% of samples
physeq_tbl_amal %>%
group_by(Genus) %>%
add_count(name = "Count") %>%
summarize(Count_nonzero = sum(Abundance != 0)) %>% View()
# Drop Genus present in less than 10% of samples
physeq_tbl_amal %>%
group_by(Genus) %>%
add_count(name = "Count") %>%
summarize(Count_nonzero = sum(Abundance != 0)) %>% View()
# Drop Genus present in less than 10% of samples
physeq_tbl_amal %>%
group_by(Genus) %>%
add_count(name = "Count") %>%
mutate(Count_nonzero = sum(Abundance != 0)) %>% View()
physeq_tbl_amal %>% filter(Genus == "Weissella")
physeq_tbl_amal %>% filter(Genus == "Weissella", Abundance > 0)
# Drop Genus present in less than 10% of samples
physeq_tbl_amal %>%
group_by(Genus) %>%
add_count(name = "Count") %>%
mutate(Count_nonzero = sum(Abundance != 0)) %>% View()
# Drop Genus present in less than 10% of samples
physeq_tbl_amal %>%
group_by(Genus) %>%
add_count(name = "Count") %>%
mutate(Count_non_zero = sum(Abundance != 0)) %>%
mutate(Frac_non_zero = Count_non_zero / Count) %>% View()
# Drop Genus present in less than 10% of samples
physeq_tbl_amal %>%
group_by(Genus) %>%
add_count(name = "Count") %>%
mutate(Count_non_zero = sum(Abundance != 0),
Frac_non_zero = Count_non_zero / Count)
# Drop Genus present in less than 10% of samples
physeq_tbl_amal %>%
group_by(Genus) %>%
add_count(name = "Count") %>%
mutate(Count_non_zero = sum(Abundance != 0),
Frac_non_zero = Count_non_zero / Count) %>% View()
# Drop Genus present in less than 10% of samples
physeq_tbl_amal %>%
group_by(Genus) %>%
add_count(name = "Count") %>%
mutate(Count_non_zero = sum(Abundance != 0),
Frac_non_zero = Count_non_zero / Count) %>%
filter(Frac_non_zero > 0.1) %>% View()
# Drop Genus present in less than 10% of samples
physeq_tbl_amal %>%
group_by(Genus) %>%
add_count(name = "Count") %>%
mutate(Count_non_zero = sum(Abundance != 0),
Frac_non_zero = Count_non_zero / Count) %>%
filter(Frac_non_zero > 0.1) %>% dim()
physeq_tbl_amal %>% dim()
# Drop Genus present in less than 10% of samples
physeq_tbl_amal %>%
group_by(Genus) %>%
add_count(name = "Count") %>%
mutate(Count_non_zero = sum(Abundance != 0),
Frac_non_zero = Count_non_zero / Count) %>%
filter(Frac_non_zero > 0.1) %>% colnames()
# Drop Genus present in less than 10% of samples
physeq_tbl_amal %>%
group_by(Genus) %>%
add_count(name = "Count") %>%
mutate(Count_non_zero = sum(Abundance != 0),
Frac_non_zero = Count_non_zero / Count) %>%
ungroup() %>%
filter(Frac_non_zero > 0.1) %>% View()
physeq_tbl_amal %>% distinct(Genus) %>% nrow()
# Drop Genus present in less than 10% of samples
physeq_tbl_amal %>%
group_by(Genus) %>%
add_count(name = "Count") %>%
mutate(Count_non_zero = sum(Abundance != 0),
Frac_non_zero = Count_non_zero / Count) %>%
ungroup() %>%
filter(Frac_non_zero > 0.1) %>% distinct(Genus) %>% nrow()
# Drop Genus present in less than 10% of samples
physeq_tbl_amal %>%
group_by(Genus) %>%
add_count(name = "Count") %>%
mutate(Count_non_zero = sum(Abundance != 0),
Frac_non_zero = Count_non_zero / Count) %>%
ungroup() %>%
filter(Frac_non_zero > 0.1) %>% colnames()
# Drop Genus present in less than 10% of samples
physeq_tbl_amal %>%
group_by(Genus) %>%
add_count(name = "Count") %>%
mutate(Count_non_zero = sum(Abundance != 0),
Frac_non_zero = Count_non_zero / Count) %>%
ungroup() %>%
filter(Frac_non_zero > 0.1) %>%
select(Sample, Genus, Abundance)
source("/net/mimer/mnt/tank/projects2/ljess/student_projects/s194545/BioStatistics/src/07_clean_phyloseq.R", echo=TRUE)
View(count_matrix)
# Pivot wider which creates count matrix
count_matrix <- physeq_tbl_amal_filt %>%
pivot_wider(names_from = Genus,
values_from = Abundance,
values_fill = 0)
View(count_matrix)
readRDS("data/dada2/dada2.phyloseq.rds") %>%
psmelt() %>% View()
readRDS("data/dada2/dada2.phyloseq.rds") %>%
psmelt() %>% distinct(Genus) %>% nrow()
View(physeq_tbl_amal_filt)
source("/net/mimer/mnt/tank/projects2/ljess/student_projects/s194545/BioStatistics/src/07_clean_phyloseq.R", echo=TRUE)
source("/net/mimer/mnt/tank/projects2/ljess/student_projects/s194545/BioStatistics/src/06_dada2.R", echo=TRUE)
View(ps)
