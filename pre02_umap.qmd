Set seed and load packages.
```{r}
#| output: FALSE
#| code-fold: true
#| code-summary: "Show the code"

set.seed(1337)

library("tidymodels")
tidymodels::tidymodels_prefer()
library("uwot")
```

Load data.
```{r}
#| output: FALSE
#| code-fold: true
#| code-summary: "Show the code"

count_matrix_clr <- readr::read_rds("https://github.com/WilliamH-R/BioStatistics/raw/main/data/count_matrix/count_matrix_clr.rds") |> 
  select(-"NA")

meta <- read.csv(file = "data/metadata.txt") |> 
  as_tibble() |>
  select(Run, chem_administration, ETHNICITY, geo_loc_name,
         Host_age, host_body_mass_index, Host_disease, host_phenotype, host_sex) |> 
  rename(Sample = Run,
         Treatment = chem_administration,
         Ethnicity = ETHNICITY,
         Location = geo_loc_name,
         Age = Host_age,
         BMI = host_body_mass_index,
         Disease_severity = Host_disease,
         EDSS = host_phenotype,
         Sex = host_sex) |>
  mutate(Patient_status = case_when(Disease_severity == "1HealthyControl" ~ "Healthy",
                                    TRUE ~ "MS"),
         EDSS = as.factor(EDSS),
         EDSS = case_when(is.na(EDSS) & Disease_severity == "1HealthyControl" ~ "-1",
                          is.na(EDSS) & Disease_severity != "1HealthyControl" ~ "Unknown",
                          TRUE ~ EDSS),
         EDSS = as.factor(EDSS))
```

# Uniform Manifold Approximation and Projection

```{r}
iris.data <- iris[, grep("Sepal|Petal", colnames(iris))]
iris.labels <- iris[, "Species"] |> 
  as_tibble()

iris.umap <- iris.data |>
  uwot::umap(n_neighbors = 20,
             min_dist = 0.2,
             metric = "euclidean") |>
  as.data.frame() |>
  as_tibble() |>
  bind_cols(iris.labels) |>
  rename(Species = value)

iris.umap |> 
  ggplot(aes(x = V1,
             y = V2,
             col = Species)) +
  geom_point()
```

```{r}
count_matrix_umap <- count_matrix_clr |>
  column_to_rownames(var = "Sample") |>
  uwot::umap(n_neighbors = 20,
             min_dist = 0.2,
             n_components = 3,
             metric = "euclidean") |>
  as.data.frame() |>
  rownames_to_column(var = "Sample") |>
  left_join(meta,
            by = "Sample")

count_matrix_umap |> 
  ggplot(aes(x = V1,
             y = V2,
             col = Patient_status)) +
  geom_point()

# Seems to be better split when using 3D
count_matrix_umap |>
  plotly::plot_ly(x = ~V1,
          y = ~V2,
          z = ~V3,
          color = ~Patient_status,
          type = "scatter3d",
          mode = "markers")
```

# Session Info

```{r}
sessioninfo::session_info()
```