---
output: html_document
editor_options: 
  chunk_output_type: console
---
# Introduction chapter on Tidyverse modelling

Imports
```{r Imports}
library(rsample)
library(dplyr)
library(tidyr)
library(purrr)
library(ggplot2)
library(modeldata) # For using crickes data
```


```{r}
# Creating a sample object, not sure how this works yet?
boot_samp <- rsample::bootstraps(mtcars, times = 3)
boot_samp
```

```{r}
# Some mapping functions
map(head(mtcars$mpg, 3), sqrt)

# Or for perhaps a better output when you now output is floats
map_dbl(head(mtcars$mpg, 3), sqrt)
```

# An actual modeling example from the introduction
A quickl look at the data:
```{r}
data(crickets, package = "modeldata")

# Plot the temperature on the x-axis, the chirp rate on the y-axis. The plot
# elements will be colored differently for each species:
ggplot(crickets, 
       aes(x = temp, y = rate, color = species, pch = species, lty = species)) + 
  # Plot points for each data point and color by species
  geom_point(size = 2) + 
  # Show a simple linear model fit created separately for each species:
  geom_smooth(method = lm, se = FALSE, alpha = 0.5) + 
  scale_color_brewer(palette = "Paired") +
  labs(x = "Temperature (C)", y = "Chirp Rate (per minute)")
```

Applying linear regression to the model. In this case, due to `(temp + species)^2` we actually fit both `temp` and `species` separately and as a combined explanatory variable `temp*species`:
```{r}
interaction_fit <-  lm(rate ~ (temp + species)^2, data = crickets) 

# To print a short summary of the model:
interaction_fit

# We see the combined variable has low impact, so lets see what the p-value is with ANOVA.
# First we create a fit without the combined variable:
main_effect_fit <-  lm(rate ~ temp + species, data = crickets) 

# Then we compare the two:
anova(main_effect_fit, interaction_fit)

# As the p-value is above 0.05, we cannot support the nul-hypothesis that they are equal. It is better to use the model without the combined variable.

# We can use the summary() method to inspect the coefficients, standard errors, and p-values of each model term:
summary(main_effect_fit)

# The species term has a value of -10.07. This indicates that, across all temperature values, O. niveus has a chirp rate that is about 10 fewer chirps per minute than O. exclamationis
```

# Make predictions for new temperatures
```{r}
new_values <- data.frame(species = "O. exclamationis", temp = 15:20)
predict(main_effect_fit, new_values)
```


# A tidyverse exmaple of applying models
Say we want to apply a model to each of the different species in the data set, this is done by nesting the data as follows:
```{r}
split_by_species <- 
  crickets %>% 
  group_nest(species) 
split_by_species
```

We can apply a model to each of the species with the map functions:
```{r}
model_by_species <- 
  split_by_species %>% 
  mutate(model = map(data, ~ lm(rate ~ temp, data = .x)))
model_by_species
```

Usually, the output of such a model as `lm` produces a chunk of text. What we want is simply the values for the different coefficients, the p-value etc. Here the `broom::tidy()` function helps along with un-nesting the data again:
```{r}
# Notice that the function `tidy()` exists both in the rsample and broom package.
# You might have an issue running the code if you do not specify which package to be used.
# To avoid some of these problems, the function tidymodels::tidymodels_prefer() exists.
model_by_species %>% 
  mutate(coef = map(model, broom::tidy)) %>% 
  select(species, coef) %>% 
  unnest(cols = c(coef))
```
























